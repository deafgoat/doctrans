faq : MongoDB Fundamentals 
this document addresses basic high level questions about MongoDB and its use . 
if you don &apos;t find the answer you &apos;re looking for , check the : doc : &apos; complete list of FAQs &lt; / faq &gt; &apos; or post your question to the &apos; MongoDB User Mailing List &lt; https : / / groups.google.com / forum / ? fromgroups # ! forum / mongodb-user &gt; &apos; _ . 
What kind of database is MongoDB ? 
MongoDB is a : term : &apos; document &apos; \ -oriented DBMS . Think of MySQL but with : term : &apos; JSON &apos; -like objects comprising the data model , rather than RDBMS tables . Significantly , MongoDB supports neither joins nor transactions . however , it features secondary indexes , an expressive query language , atomic writes on a per-document level , and fully-consistent reads . 
Operationally , MongoDB features master-slave replication with automated failover and built-in horizontal scaling via automated range-based partitioning . 
MongoDB uses : term : &apos; BSON &apos; , a binary object format similar to , but more expressive than : term : &apos; JSON &apos; . 
do MongoDB databases have tables ? 
Instead of tables , a MongoDB database stores its data in : term : &apos; collections &lt; collection &gt; &apos; , which are the rough equivalent of RDBMS tables . a collection holds one or more : term : &apos; documents &lt; document &gt; &apos; , which corresponds to a record or a row in a relational database table , and each document has one or more fields , which corresponds to a column in a relational database table . 
collections have important differences from RDBMS tables . documents in a single collection may have a unique combination and set of fields . documents need not have identical fields . you can add a field to some documents in a collection without adding that field to all documents in the collection . 
see 
do MongoDB databases have schemas ? 
MongoDB uses dynamic schemas . you can create collections without defining the structure , i.e. the fields or the types of their values , of the documents in the collection . you can change the structure of documents simply by adding new fields or deleting existing ones . documents in a collection need not have an identical set of fields . 
in practice , it is common for the documents in a collection to have a largely homogeneous structure ; however , this is not a requirement . MongoDB &apos;s flexible schemas mean that schema migration and augmentation are very easy in practice , and you will rarely , if ever , need to write scripts that perform &quot; alter table &quot; type operations , which simplifies and facilitates iterative software development with MongoDB . 
What languages can I use to work with MongoDB ? 
MongoDB : term : &apos; client drivers &lt; driver &gt; &apos; exist for all of the most popular programming languages , and many other ones . see the : ecosystem : &apos; latest list of drivers &lt; / drivers &gt; &apos; for details . 
: doc : &apos; / applications / drivers &apos; . 
does MongoDB support SQL ? 
no . 
however , MongoDB does support a rich , ad-hoc query language of its own . 
: doc : &apos; / reference / operator &apos; 
What are typical uses for MongoDB ? 
MongoDB has a general-purpose design , making it appropriate for a large number of use cases . Examples include content management systems , mobile applications , gaming , e-commerce , analytics , archiving , and logging . 
do not use MongoDB for systems that require SQL , joins , and multi-object transactions . 
does MongoDB support ACID transactions ? 
MongoDB does not support multi-document transactions . 
however , MongoDB does provide atomic operations on a single document . often these document-level atomic operations are sufficient to solve problems that would require ACID transactions in a relational database . 
for example , in MongoDB , you can embed related data in nested arrays or nested documents within a single document and update the entire document in a single atomic operation . relational databases might represent the same kind of data with multiple tables and rows , which would require transaction support to update the data atomically . 
MongoDB allows clients to read documents inserted or modified before it commits these modifications to disk , regardless of write concern level or journaling configuration . as a result , applications may observe two classes of behaviors : 
for systems with multiple concurrent readers and writers , MongoDB will allow clients to read the results of a write operation before the write operation returns . 
if the : program : &apos; mongod &apos; terminates before the journal commits , even if a write returns successfully , queries may have read data that will not exist after the : program : &apos; mongod &apos; restarts . 
other database systems refer to these isolation semantics as * read uncommitted * . for all inserts and updates , MongoDB modifies each document in isolation : clients never see documents in intermediate states . for multi-document operations , MongoDB does not provide any multi-document transactions or isolation . 
When : program : &apos; mongod &apos; returns a successful * journaled write concern * , the data is fully committed to disk and will be available after : program : &apos; mongod &apos; restarts . 
for replica sets , write operations are durable only after a write replicates and commits to the journal of a majority of the members of the set . MongoDB regularly commits data to the journal regardless of journaled write concern : use the : setting : &apos; ~ storage.journal.commitIntervalMs &apos; to control how often a : program : &apos; mongod &apos; commits the journal . 
does MongoDB require a lot of RAM ? 
not necessarily . it &apos;s certainly possible to run MongoDB on a machine with a small amount of free RAM . 
MongoDB automatically uses all free memory on the machine as its cache . system resource monitors show that MongoDB uses a lot of memory , but its usage is dynamic . if another process suddenly needs half the server &apos;s RAM , MongoDB will yield cached memory to the other process . 
Technically , the operating system &apos;s virtual memory subsystem manages MongoDB &apos;s memory . this means that MongoDB will use as much free memory as it can , swapping to disk as needed . deployments with enough memory to fit the application &apos;s working data set in RAM will achieve the best performance . 
: doc : &apos; / faq / diagnostics &apos; for answers to additional questions about MongoDB and Memory use . 
how do I configure the cache size ? 
MongoDB has no configurable cache . MongoDB uses all * free * memory on the system automatically by way of memory-mapped files . operating systems use the same approach with their file system caches . 
does MongoDB require a separate caching layer for application-level caching ? 
no . in MongoDB , a document &apos;s representation in the database is similar to its representation in application memory . this means the database already stores the usable form of data , making the data usable in both the persistent store and in the application cache . this eliminates the need for a separate caching layer in the application . 
this differs from relational databases , where caching data is more expensive . relational databases must transform data into object representations that applications can read and must store the transformed data in a separate cache : if these transformation from data to application objects require joins , this process increases the overhead related to using the database which increases the importance of the caching layer . 
does MongoDB handle caching ? 
Yes . MongoDB keeps all of the most recently used data in RAM . if you have created indexes for your queries and your working data set fits in RAM , MongoDB serves all queries from memory . 
MongoDB does not implement a query cache : MongoDB serves all queries directly from the indexes and / or data files . 
are writes written to disk immediately , or lazily ? 
writes are physically written to the : doc : &apos; journal &lt; / core / journaling &gt; &apos; within 100 milliseconds , by default . At that point , the write is &quot; durable &quot; in the sense that after a pull-plug-from-wall event , the data will still be recoverable after a hard restart . see : setting : &apos; ~ storage.journal.commitIntervalMs &apos; for more information on the journal commit window . 
While the journal commit is nearly instant , MongoDB writes to the data files lazily . MongoDB may wait to write data to the data files for as much as one minute by default . this does not affect durability , as the journal has enough information to ensure crash recovery . to change the interval for writing to the data files , see : setting : &apos; ~ storage.syncPeriodSecs &apos; . 
What language is MongoDB written in ? 
MongoDB is implemented in C + + . : term : &apos; drivers &lt; driver &gt; &apos; and client libraries are typically written in their respective languages , although some drivers use C extensions for better performance . 
What are the limitations of 32-bit versions of MongoDB ? 
MongoDB uses : ref : &apos; memory-mapped files &lt; faq-storage-memory-mapped-files &gt; &apos; . When running a 32-bit build of MongoDB , the total storage size for the server , including data and indexes , is 2 gigabytes . for this reason , do not deploy MongoDB to production on 32-bit machines . 
if you &apos;re running a 64-bit build of MongoDB , there &apos;s virtually no limit to storage size . for production deployments , 64-bit builds and operating systems are strongly recommended . 
&quot; &apos; Blog Post : 32-bit Limitations &lt; http : / / blog.mongodb.org / post / 137788967 / 32-bit-limitations &gt; &apos; _ &quot; 
32-bit builds disable : term : &apos; journaling &lt; journal &gt; &apos; by default because journaling further limits the maximum amount of data that the database can 
